/* AlParse.java */
/* Generated By:JavaCC: Do not edit this line. AlParse.java */
public class AlParse implements AlParseConstants {

        public static void main(String[] args) {

                AlParse parser;
                if (args.length == 0){
                        System.out.println("Reading from std input..");
                        parser = new AlParse(System.in);
                }
                else if (args.length == 1) {
                        try {
                                System.out.println("Reading file: " + args[0] + " . . .");
                                parser = new AlParse(new java.io.FileInputStream(args[0]));
                        }       catch (java.io.FileNotFoundException e) {
                                System.err.println("File " + args[0] + " not found.");
                                return;
                        }
                }
                        else {
                                System.out.println("SLP Tokeniser: Usage is one of:");
                                System.out.println(" java SLPTokeniser < inputfile");
                                System.out.println("OR");
                                System.out.println(" java SLPTokeniser inputfile");
                                return;
                        }
                        try {
                                parser.Prog();
                                System.out.println("Program parsed successfully.");
                        } catch (ParseException e) {
                                System.out.println(e.getMessage());
                                System.out.println("Errrrrr");
                        }
        }

/*************************************************************************
SECTION 4 - THE GRAMMAR & PRODUCTION RULES - WOULD NORMALLY START HERE 
**************************************************************************/
  static final public 
void Prog() throws ParseException {
    Decl_List();
    Function_List();
    Main();
  }

  static final public void Decl_List() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:
    case CONST:{
      Decl();
      jj_consume_token(SEMICO);
      Decl_List();
      break;
      }
    default:
      jj_la1[0] = jj_gen;

    }
  }

  static final public void Decl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      Var_Decl();
      break;
      }
    case CONST:{
      Const_Decl();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Var_Decl() throws ParseException {
    jj_consume_token(VAR);
    jj_consume_token(ID);
    jj_consume_token(COLON);
    Type();
  }

  static final public void Const_Decl() throws ParseException {
    jj_consume_token(CONST);
    jj_consume_token(ID);
    jj_consume_token(COLON);
    Type();
    jj_consume_token(EQUA);
    Expression();
  }

  static final public void Function_List() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:
    case BOOLEAN:
    case VOID:{
      Function();
      Function_List();
      break;
      }
    default:
      jj_la1[2] = jj_gen;

    }
  }

  static final public void Function() throws ParseException {
    Type();
    jj_consume_token(ID);
    jj_consume_token(LBRAC);
    Parameter_List();
    jj_consume_token(RBRAC);
    jj_consume_token(LCB);
    Decl_List();
    Statement_Block();
    jj_consume_token(RETURN);
    jj_consume_token(LBRAC);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRAC:
    case MINUS_SIGN:
    case TRUE:
    case FALSE:
    case ID:
    case INT:{
      Expression();
      break;
      }
    default:
      jj_la1[3] = jj_gen;

    }
    jj_consume_token(RBRAC);
    jj_consume_token(SEMICO);
    jj_consume_token(RCB);
  }

  static final public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:{
      jj_consume_token(INTEGER);
      break;
      }
    case BOOLEAN:{
      jj_consume_token(BOOLEAN);
      break;
      }
    case VOID:{
      jj_consume_token(VOID);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Parameter_List() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      Nemp_Parameter_List();
      break;
      }
    default:
      jj_la1[5] = jj_gen;

    }
  }

  static final public void Nemp_Parameter_List() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(COLON);
    Type();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      Nemp_Parameter_List();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  static final public void Main() throws ParseException {
    jj_consume_token(MAIN);
    jj_consume_token(LCB);
    Decl_List();
    Statement_Block();
    jj_consume_token(RCB);
  }

  static final public void Statement_Block() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LCB:
    case IF:
    case WHILE:
    case SCIP:
    case ID:{
      Statement();
      Statement_Block();
      break;
      }
    default:
      jj_la1[7] = jj_gen;

    }
  }

  static final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      jj_consume_token(ID);
      Statement_prime();
      break;
      }
    case LCB:{
      jj_consume_token(LCB);
      Statement_Block();
      jj_consume_token(RCB);
      break;
      }
    case IF:{
      jj_consume_token(IF);
      Condition();
      jj_consume_token(LCB);
      Statement_Block();
      jj_consume_token(RCB);
      jj_consume_token(ELSE);
      jj_consume_token(LCB);
      Statement_Block();
      jj_consume_token(RCB);
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      Condition();
      jj_consume_token(LCB);
      Statement_Block();
      jj_consume_token(RCB);
      break;
      }
    case SCIP:{
      jj_consume_token(SCIP);
      jj_consume_token(SEMICO);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Statement_prime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUA:{
      jj_consume_token(EQUA);
      Expression();
      jj_consume_token(SEMICO);
      break;
      }
    case LBRAC:{
      jj_consume_token(LBRAC);
      Arg_List();
      jj_consume_token(RBRAC);
      jj_consume_token(SEMICO);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRAC:{
      jj_consume_token(LBRAC);
      Expression();
      jj_consume_token(RBRAC);
      exp_prime();
      break;
      }
    case MINUS_SIGN:
    case TRUE:
    case FALSE:
    case ID:
    case INT:{
      Fragment();
      exp_prime();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void exp_prime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS_SIGN:
    case MINUS_SIGN:{
      Binary_Arith_Op();
      Fragment();
      exp_prime();
      break;
      }
    default:
      jj_la1[11] = jj_gen;

    }
  }

  static final public void Binary_Arith_Op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS_SIGN:{
      jj_consume_token(PLUS_SIGN);
      break;
      }
    case MINUS_SIGN:{
      jj_consume_token(MINUS_SIGN);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Fragment() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MINUS_SIGN:
    case ID:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MINUS_SIGN:{
        jj_consume_token(MINUS_SIGN);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRAC:{
        jj_consume_token(LBRAC);
        Arg_List();
        jj_consume_token(RBRAC);
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      break;
      }
    case INT:{
      jj_consume_token(INT);
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Cond_Prime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LOG_OR:
    case LOG_AND:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LOG_OR:{
        jj_consume_token(LOG_OR);
        break;
        }
      case LOG_AND:{
        jj_consume_token(LOG_AND);
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Condition();
      Cond_Prime();
      break;
      }
    default:
      jj_la1[17] = jj_gen;

    }
  }

  static final public void Condition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TILDA:{
      jj_consume_token(TILDA);
      Condition();
      Cond_Prime();
      break;
      }
    case LBRAC:{
      jj_consume_token(LBRAC);
      Condition();
      jj_consume_token(RBRAC);
      Cond_Prime();
      break;
      }
    case MINUS_SIGN:
    case TRUE:
    case FALSE:
    case ID:
    case INT:{
      Fragment();
      CompOp();
      Expression();
      Cond_Prime();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void CompOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUATE:{
      jj_consume_token(EQUATE);
      break;
      }
    case NOT_EQUA:{
      jj_consume_token(NOT_EQUA);
      break;
      }
    case LT:{
      jj_consume_token(LT);
      break;
      }
    case LTOET:{
      jj_consume_token(LTOET);
      break;
      }
    case GT:{
      jj_consume_token(GT);
      break;
      }
    case GTOET:{
      jj_consume_token(GTOET);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Arg_List() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      Nemp_Arg_List();
      break;
      }
    default:
      jj_la1[20] = jj_gen;

    }
  }

  static final public void Nemp_Arg_List() throws ParseException {
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      Nemp_Arg_List();
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      ;
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AlParseTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xc0000000,0xc0000000,0x0,0x120000,0x0,0x0,0x800,0x8000,0x8000,0x24000,0x120000,0x180000,0x180000,0x100000,0x20000,0x100000,0xc00000,0xc00000,0x320000,0x3f000000,0x0,0x800,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0xe,0x6180,0xe,0x2000,0x0,0x2620,0x2620,0x0,0x6180,0x0,0x0,0x0,0x0,0x6180,0x0,0x0,0x6180,0x0,0x2000,0x0,};
   }

  /** Constructor with InputStream. */
  public AlParse(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AlParse(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AlParseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AlParse(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new AlParseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AlParse(AlParseTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AlParseTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[47];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 47; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
